#! /usr/bin/env ruby

help = File.expand_path(File.join("..", "README"), File.dirname(__FILE__))

if ARGV.empty?
  exec "${PAGER:-less} #{help}"
end

require "clap"
require "json"

trap(:INT) { puts; exit 1 }

def recipes_for(assigned_roles)
  [].tap do |recipes|
    assigned_roles.each do |name|
      if roles[name]
        recipes.concat(recipes_for(roles[name]))
      else
        recipes.push(name)
      end
    end

    recipes.uniq!
  end
end

def path(*parts)
  File.expand_path(File.join(*parts), ENV["TELE_HOME"])
end

def ssh(server, options = [])
  "ssh #{options.join(" ")} #{server}"
end

def layout
  $layout ||= JSON.parse(File.read(path("layout.json")))
end

def servers
  layout["servers"]
end

def roles
  layout["roles"]
end

def run(server, recipe)
  script = path("recipes", "#{recipe}.sh")

  if File.exist?(script)
    %x{bash -c "#{ssh(server, SSH_OPTIONS)} < #{script} > >(logger -t 'tele/#{server}/#{recipe}') 2>&1"}
    $?.exitstatus
  end
end

out = Module.new do
  def self.server(name)
    puts name
  end

  def self.error
    puts "\033[01;31mERROR\033[00m"
  end

  def self.ok
    puts "\033[01;32mOK\033[00m"
  end

  def self.log(match)
    puts "\033[1;30m#{match[:date]} \033[1;33m#{match[:who]}\033[00m #{match[:message]}"
  end

  def self.unknown
    puts "?"
  end
end

###

ENV["TELE_HOME"] ||= File.join(Dir.pwd, ".tele")

# Let's try and collect specific servers if ever the user
# decides to cherry pick his `tele deploy` command.
selected_servers = {}

commands = Clap.run ARGV,
  "-h" => lambda {
    exec "${PAGER:-less} #{help}"
  },
  "-d" => lambda { |path|
    ENV["TELE_HOME"] = File.join(Dir.pwd, path)
  },
  "-s" => lambda { |server|
    selected_servers[server] = servers[server] if servers.has_key?(server)
  }

Clap.run commands,
  "init" => lambda {
    source = File.expand_path("../templates/.tele", File.dirname(__FILE__))
    target = File.expand_path(Dir.pwd)

    %x{cp -r #{source} #{target}}

    %x{find #{target} -name .empty -print0 | xargs rm}
  },

  "tail" => lambda {
    $stdout.sync = true

    parser = %r{^(?<date>.* \d\d:\d\d:\d\d) \w+ tele/(?<who>.*)\[\d+\]: (?<message>.*)$}

    IO.popen("tail -0 -f /var/log/system.log /var/log/syslog 2>/dev/null") do |io|
      while line = io.gets
        next unless match = parser.match(line)
        out.log(match)
      end
    end
  }

unless File.directory?(path)
  $stderr.puts "Couldn't find a .tele directory"
  exit 1
end

SSH_OPTIONS = [
  "-T",
  "-F", path("ssh_config"),
  "-S", "/tmp/ssh-%r@%h:%p",
]

selected_servers = servers if selected_servers.empty?

Clap.run commands,
  "deploy" => lambda {
    selected_servers.each do |server, _|
      IO.popen(ssh(server, SSH_OPTIONS + %w[-Mq]), "w")
    end

    selected_servers.each do |server, assigned_roles|
      out.server(server)

      recipes_for(assigned_roles).each do |recipe|
        print "  #{recipe}: "

        case run(server, recipe)
        when nil
          out.unknown
        when 0
          out.ok
        else
          out.error
        end
      end

      puts
    end
  }