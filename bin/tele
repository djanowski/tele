#! /usr/bin/env ruby

help = File.expand_path(File.join("..", "README"), File.dirname(__FILE__))

if ARGV.empty?
  exec "${PAGER:-less} #{help}"
end

require "clap"
require "json"

trap(:INT) { puts; exit 1 }

def recipes_for(assigned_roles)
  [].tap do |recipes|
    assigned_roles.each do |name|
      if roles[name]
        recipes.concat(recipes_for(roles[name]))
      else
        recipes.push(name)
      end
    end

    recipes.uniq!
  end
end

def path(*parts)
  File.expand_path(File.join(*parts), ENV["TELE_HOME"])
end

def ssh(server, options = [])
  "ssh #{options.join(" ")} #{server}"
end

def layout
  $layout ||= JSON.parse(File.read(path("layout.json")))
end

def servers
  $servers ||= layout["servers"]
end

def roles
  layout["roles"]
end

def run(server, recipe)
  script = path("recipes", "#{recipe}.sh")

  if File.exist?(script)
    IO.popen(ssh(server, SSH_OPTIONS), "r+") do |io|
      io.puts(File.read(script))
      io.close_write

      while line = io.gets
        yield(line)
      end
    end

    $?.exitstatus
  end
end

out = Module.new do
  def self.recipe(server, recipe)
    print "#{server}/#{recipe}: "
  end

  def self.error
    print "\033[01;31mERROR\033[00m"
  end

  def self.ok
    print "\033[01;32mOK\033[00m"
  end

  def self.unknown
    print "\033[1;33m?\033[00m"
  end
end

###

ENV["TELE_HOME"] ||= File.join(Dir.pwd, ".tele")

commands = Clap.run ARGV,
  "-h" => lambda {
    exec "${PAGER:-less} #{help}"
  },
  "-d" => lambda { |path|
    ENV["TELE_HOME"] = File.join(Dir.pwd, path)
  },
  "-s" => lambda { |server|
    unless servers.has_key?(server)
      $stderr.puts "Unknown server: #{server}"
      exit 1
    end

    servers.delete_if { |s, _| s != server }
  }

commands = Clap.run commands,
  "init" => lambda {
    source = File.expand_path("../templates/.tele", File.dirname(__FILE__))
    target = File.expand_path(Dir.pwd)

    %x{cp -r #{source} #{target}}

    %x{find #{target} -name .empty -print0 | xargs rm}
  }

unless File.directory?(path)
  $stderr.puts "Couldn't find a .tele directory"
  exit 1
end

SSH_OPTIONS = [
  "-T",
  "-F", path("ssh_config"),
  "-S", "/tmp/ssh-%r@%h:%p",
]

commands = Clap.run commands,
  "deploy" => lambda {
    servers.each do |server, _|
      IO.popen(ssh(server, SSH_OPTIONS + %w[-Mq]), "w")
    end

    servers.each do |server, assigned_roles|
      recipes_for(assigned_roles).each do |recipe|
        out.recipe(server, recipe)

        # first = true

        result = run(server, recipe) do |line|
          print line
          out.recipe(server, recipe) # unless first
        end

        case result
        when nil
          out.unknown
        when 0
          out.ok
        else
          out.error
        end

        print "\n"
      end
    end
  }

unless commands.empty?
  $stderr.puts "Error: unrecognized parameter: #{commands.join(" ")}"
  exit 1
end
